package com.aistudyassistant.backend.AI_Study_Assistant_Backend.controller;

import com.aistudyassistant.backend.AI_Study_Assistant_Backend.dtos.QuizDto;
import com.aistudyassistant.backend.AI_Study_Assistant_Backend.service.QuizService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/notes")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Quizzes", description = "Quiz Management APIs")
@SecurityRequirement(name = "bearerAuth")
public class QuizController {

    private final QuizService quizService;

    @PostMapping(value = "/{id}/quiz", consumes = "application/json", produces = "application/json")
    @Operation(summary = "Save AI-generated quiz", description = "Save quiz/MCQs generated by AI microservice")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Quiz saved successfully",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = QuizDto.class))),
            @ApiResponse(responseCode = "404", description = "Note not found or access denied"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
    })
    public ResponseEntity<QuizDto> saveQuiz(
            @PathVariable Long id,
            @RequestBody QuizDto quizDto,
            @AuthenticationPrincipal UserDetails userDetails
    ) {
        quizDto.setNoteId(id);
        QuizDto result = quizService.save(quizDto, userDetails.getUsername());
        return new ResponseEntity<>(result, HttpStatus.CREATED);
    }

    @GetMapping(value = "/{id}/quiz", produces = "application/json")
    @Operation(summary = "Get note quiz", description = "Retrieve AI-generated quiz/MCQs for a note")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Quiz retrieved successfully",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = QuizDto.class))),
            @ApiResponse(responseCode = "404", description = "Note or quiz not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
    })
    public ResponseEntity<QuizDto> getQuizByNoteId(
            @PathVariable Long id,
            @AuthenticationPrincipal UserDetails userDetails
    ) {
        QuizDto quizDto = quizService.getByNoteId(id, userDetails.getUsername());
        return new ResponseEntity<>(quizDto, HttpStatus.OK);
    }
}