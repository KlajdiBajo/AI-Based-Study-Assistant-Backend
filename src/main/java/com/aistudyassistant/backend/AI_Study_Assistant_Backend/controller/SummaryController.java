package com.aistudyassistant.backend.AI_Study_Assistant_Backend.controller;

import com.aistudyassistant.backend.AI_Study_Assistant_Backend.dtos.SummaryDto;
import com.aistudyassistant.backend.AI_Study_Assistant_Backend.service.SummaryService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/notes")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Summaries", description = "Summary Management APIs")
@SecurityRequirement(name = "bearerAuth")
public class SummaryController {

    private final SummaryService summaryService;

    @PostMapping(value = "/{id}/summary", consumes = "application/json", produces = "application/json")
    @Operation(summary = "Save AI-generated summary", description = "Save summary generated by AI microservice")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Summary saved successfully",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = SummaryDto.class))),
            @ApiResponse(responseCode = "404", description = "Note not found or access denied"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
    })
    public ResponseEntity<SummaryDto> saveSummary(
            @PathVariable Long id,
            @RequestBody SummaryDto summaryDto,
            @AuthenticationPrincipal UserDetails userDetails
    ) {
        summaryDto.setNoteId(id);
        SummaryDto saved = summaryService.save(summaryDto, userDetails.getUsername());
        return new ResponseEntity<>(saved, HttpStatus.CREATED);
    }

    @GetMapping(value = "/{id}/summary", produces = "application/json")
    @Operation(summary = "Get note summary", description = "Retrieve AI-generated summary for a note")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Summary retrieved successfully",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = SummaryDto.class))),
            @ApiResponse(responseCode = "404", description = "Note or summary not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
    })
    public ResponseEntity<SummaryDto> getSummaryByNoteId(
            @PathVariable Long id,
            @AuthenticationPrincipal UserDetails userDetails
    ) {
        SummaryDto summary = summaryService.getByNoteId(id, userDetails.getUsername());
        return new ResponseEntity<>(summary, HttpStatus.OK);
    }
}